# I don't think ggsave knows how to save this type of image? -Josh
#ggsave(filename = "../reports/figures/mobility_corr", width = 6.5, height = 4.5, units = "in", plot = mobility_corr)
# No employee face mask map for EDA
noEmpfacemaskMap <- plot_usmap(data = covid, values = "NoFaceMaskEmploy_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "dimgrey", `1` = "lightblue"), name = "NoFaceMask")+
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
ggsave(filename = "../reports/figures/NoEmpFaceMaskMap.png", width = 6.5, height = 4.5, units = "in", plot = noEmpfacemaskMap)
#### Case Rate per 100K in the last 7 Days: ####
rate_hist <- ggplot(covid, aes(x=`Case.Rate.per.100000.in.Last.7.Days`)) +
geom_histogram() +
ggtitle("") +
xlab("Case Rate Per 100K from Oct. 24th- Oct. 30th")
ggsave(filename = "../reports/figures/case_rate_sevendays_hist.png")
log_rate_hist <- ggplot(covid, aes(x=log(`Case.Rate.per.100000.in.Last.7.Days`))) +
geom_histogram() +
ggtitle("") +
xlab("Log Case Rate Per 100K from Oct. 24th- Oct. 30th")
ggsave(filename = "../reports/figures/log_case_rate_sevendays_hist.png")
SIPMap <- plot_usmap(data = covid, values = "SIP_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "dimgrey", `1` = "grey"), name = "SIP") +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
SIPmap
SIPMap <- plot_usmap(data = covid, values = "SIP_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "dimgrey", `1` = "grey"), name = "SIP") +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
SIPmap
SIPMap <- plot_usmap(data = covid, values = "SIP_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "dimgrey", `1` = "grey"), name = "SIP") +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
SIPMap
# Load in libraries
library(tidyverse)
library(gridExtra)
library(usmap)
library(corrplot)
source("http://www.sthda.com/upload/rquery_cormat.r") #for correlation matrix
# Load data, some fnctions use `data', some use `covid'
# We can organize this later, should rename everything to one name
data <- read_rds("../data/processed/main_state_data.RDS")
covid <- data
#### Workplace mobility as stand-in for âmobilityâ in general ####
# Workplace mobility vs transit
workplace_transit_scatter <- ggplot(data = data, aes(x=workplaces_2020.10.10, y=transit_2020.10.10 )) +
geom_point()
ggsave(plot = workplace_transit_scatter,  filename = "../reports/figures/workplace_transit_scatter.png")
# Workplace vs retail/recreation
workplace_retrec_scatter <- ggplot(data = data, aes(x=workplaces_2020.10.10, y=retail_rec_2020.10.10 )) +
geom_point()
ggsave(plot = workplace_retrec_scatter,  filename = "../reports/figures/workplace_retrec_scatter.png")
#### Mobility as Predictor ####
workplace_cases_scatter <- ggplot(data = data, aes(x=workplaces_2020.10.10, y=Case.Rate.per.100000.in.Last.7.Days )) +
geom_point()
ggsave(plot = workplace_cases_scatter,  filename = "../reports/figures/workplace_cases_scatter.png")
workplace_logcases_scatter <-  ggplot(data = data, aes(x=workplaces_2020.10.10, y=log(Case.Rate.per.100000.in.Last.7.Days) )) +
geom_point()+
xlab("Workplace Mobility for the week of 10/10/20") +
ylab("Log Case Rate from 10/24/20 to 10/30/20")
ggsave(plot = workplace_logcases_scatter,  filename = "../reports/figures/workplace_logcases_scatter.png")
cor(data$workplaces_2020.10.10, log(data$Case.Rate.per.100000.in.Last.7.Days))
# Workplace vs cases, grouped by SIP indicator
workplace_cases_SIP <- ggplot(data = data, aes(x=workplaces_2020.10.10, y = Case.Rate.per.100000.in.Last.7.Days, color = as.factor(SIP), fill = as.factor(SIP))) +
geom_point() +
geom_smooth(method = 'lm') +
xlab('Workplace Mobility 10/10-10/17') +
ylab('Case Rates per 100K 10/23-10/30') +
scale_fill_discrete(name = "Instituted SIP", labels = c("No", "Yes")) +
guides(color = F)
ggsave(plot = workplace_cases_SIP,  filename = "../reports/figures/Mob_Cases_SIP_plot.png")
#### Maps ####
# No face mask map for EDA
nofacemaskMap <- plot_usmap(data = covid, values = "NoFaceMask_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "grey", `1` = "dimgrey"), name = "NoFaceMask")+
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
ggsave(filename = "../reports/figures/NoFaceMaskMap.png", width = 6.5, height = 4.5, units = "in", plot = nofacemaskMap)
# SIP map for EDA
SIPMap <- plot_usmap(data = covid, values = "SIP_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "dimgrey", `1` = "grey"), name = "SIP") +
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
SIPMap
ggsave(filename = "../reports/figures/SIP_map.png", width = 6.5, height = 4.5, units = "in", plot = SIPMap)
class(covid$NoFaceMask)
##### Mobility ######
mobility <- data[,c('workplaces_2020.10.10', 'transit_2020.10.10', 'parks_2020.10.10', 'residential_2020.10.10', 'groc_pharm_2020.10.10', 'retail_rec_2020.10.10')]
mobility <- mobility %>%
rename(
'workplaces' = 'workplaces_2020.10.10',
'transit' = 'transit_2020.10.10',
'parks' = 'parks_2020.10.10',
'residential' = 'residential_2020.10.10',
'groc_pharm' = 'groc_pharm_2020.10.10',
'retail_rec'= 'retail_rec_2020.10.10' ,
)
png(filename = "../reports/figures/mobility_corr.png",  units="in", width=5, height=5, res=200)
rquery.cormat(mobility)
# dev.off() to save the file and return to control screen
dev.off()
# I don't think ggsave knows how to save this type of image? -Josh
#ggsave(filename = "../reports/figures/mobility_corr", width = 6.5, height = 4.5, units = "in", plot = mobility_corr)
# No employee face mask map for EDA
noEmpfacemaskMap <- plot_usmap(data = covid, values = "NoFaceMaskEmploy_factor", color = "black", labels = F) +
scale_fill_manual(values = c(`0` = "grey", `1` = "dimgrey"), name = "NoFaceMask")+
theme(legend.position = 'none', plot.title = element_text(hjust = 0.5))
ggsave(filename = "../reports/figures/NoEmpFaceMaskMap.png", width = 6.5, height = 4.5, units = "in", plot = noEmpfacemaskMap)
#### Case Rate per 100K in the last 7 Days: ####
rate_hist <- ggplot(covid, aes(x=`Case.Rate.per.100000.in.Last.7.Days`)) +
geom_histogram() +
ggtitle("") +
xlab("Case Rate Per 100K from Oct. 24th- Oct. 30th")
ggsave(filename = "../reports/figures/case_rate_sevendays_hist.png")
log_rate_hist <- ggplot(covid, aes(x=log(`Case.Rate.per.100000.in.Last.7.Days`))) +
geom_histogram() +
ggtitle("") +
xlab("Log Case Rate Per 100K from Oct. 24th- Oct. 30th")
ggsave(filename = "../reports/figures/log_case_rate_sevendays_hist.png")
- *Log Case Rate per 100K in the last 7 Days:* From the distribution of Log Case Rate per 100k over the past 7 days we can see the datais sparse but relatively normal. There were no missing or null values in this column. See Figure \@ref(fig:cases-last7days-hist)
library(tidyverse)
library(stargazer)
library(sandwich)
data <- read_rds("../data/processed/main_state_data.RDS")
## All below done in Python Now ##
#################################
# Colnames: replace spaces with underscore,
# remove parantheses, metacharacters () must be enclosed in []
#colnames(data) <- gsub(" ", "_", colnames(data))
#colnames(data) <- gsub("[()]", "", colnames(data))
head(data)
data$NoFaceMaskEmploy
lm1 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP, data = data)
lm2 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
cov1 <- vcovHC(lm1, type = "HC1")
robust_se1 <- sqrt(diag(cov1))
cov2 <- vcovHC(lm2, type = "HC1")
robust_se2 <- sqrt(diag(cov2))
cov3 <- vcovHC(lm3, type = "HC1")
robust_se3 <- sqrt(diag(cov3))
cov4 <- vcovHC(lm4, type = "HC1")
robust_se4 <- sqrt(diag(cov4))
# Produce initial stargazer table
# Copy results to regression-tables.tex,
# Change covariate names, etc, then produce
# regression-tables.pdf which will knit into
# draft report
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4))
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4))
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes = ' Robust standard errors in parentheses using \texttt{vcovHC(model, type = "HC1"))
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes = ' Robust standard errors in parentheses using \texttt{vcovHC(model, type = "HC1")')
# Produce initial stargazer table
# Copy results to regression-tables.tex,
# Change covariate names, etc, then produce
# regression-tables.pdf which will knit into
# draft report
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes = 'Robust standard errors in parentheses using \texttt{vcovHC(model, type = "HC1")')
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes = 'Robust standard errors in parentheses using vcovHC(model, type = "HC1")')
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4))
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes.append = FALSE, notes.align = "l",
notes = "This will be replaced")
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes.append = TRUE, notes.align = "l",
notes = "This will be replaced")
data$NoFaceMaskEmploy
lm1 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP, data = data)
lm2 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
cov1 <- vcovHC(lm1, type = "HC1")
robust_se1 <- sqrt(diag(cov1))
cov2 <- vcovHC(lm2, type = "HC1")
robust_se2 <- sqrt(diag(cov2))
cov3 <- vcovHC(lm3, type = "HC1")
robust_se3 <- sqrt(diag(cov3))
cov4 <- vcovHC(lm4, type = "HC1")
robust_se4 <- sqrt(diag(cov4))
# Produce initial stargazer table
# Copy results to regression-tables.tex,
# Change covariate names, etc, then produce
# regression-tables.pdf which will knit into
# draft report
stargazer(lm1,
lm2,
lm3,
lm4, se = list(robust_se1, robust_se2, robust_se3, robust_se4),
notes.append = TRUE, notes.align = "l",
notes = "This will be replaced")
sandwich::vcovHC
library(tidyverse)
library(stargazer)
data <- read_rds("../data/processed/main_state_data.RDS")
## All below done in Python Now ##
#################################
# Colnames: replace spaces with underscore,
# remove parantheses, metacharacters () must be enclosed in []
#colnames(data) <- gsub(" ", "_", colnames(data))
#colnames(data) <- gsub("[()]", "", colnames(data))
head(data)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_pred_resid.png")
library(tidyverse)
library(stargazer)
data <- read_rds("../data/processed/main_state_data.RDS")
## All below done in Python Now ##
#################################
# Colnames: replace spaces with underscore,
# remove parantheses, metacharacters () must be enclosed in []
#colnames(data) <- gsub(" ", "_", colnames(data))
#colnames(data) <- gsub("[()]", "", colnames(data))
head(data)
lm1 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP, data = data)
lm2 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
summary(lm3)
cor(data$SIP, data$workplaces_2020.10.10)
cor(data$SIP, data$NoFaceMask)
cor(data$NoFaceMask, data$workplaces_2020.10.10)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_pred_resid.png")
# Ocular Test
# use the same plot from lce
#ggplot(aes(x = predict(lm3), y = resid(lm3)), data = data) +
geom_point() +
xlab('Model 3 Predictions')
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_pred_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_pred_resid.png")
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3d, filename = "../reports/figures/LCE_pred_resid.png")
#plot_model_3c
plot_model_3d
# Breusch-Pagan test
lmtest::bptest(lm3)
library(tidyverse)
library(stargazer)
data <- read_rds("../data/processed/main_state_data.RDS")
## All below done in Python Now ##
#################################
# Colnames: replace spaces with underscore,
# remove parantheses, metacharacters () must be enclosed in []
#colnames(data) <- gsub(" ", "_", colnames(data))
#colnames(data) <- gsub("[()]", "", colnames(data))
head(data)
lm1 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP, data = data)
lm2 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
summary(lm3)
cor(data$SIP, data$workplaces_2020.10.10)
cor(data$SIP, data$NoFaceMask)
cor(data$NoFaceMask, data$workplaces_2020.10.10)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3d, filename = "../reports/figures/LCE_pred_resid.png")
# Ocular Test
# use the same plot from lce
#ggplot(aes(x = predict(lm3), y = resid(lm3)), data = data) +
#geom_point() +
#xlab('Model 3 Predictions')
#plot(lm3, which=3)
# Breusch-Pagan test
lmtest::bptest(lm3)
norm_error1 <- ggplot(data = data) +
geom_histogram(mapping = aes(x = resid(lm3))) +
ggtitle("Distribution of Residuals for Model 3") +
xlab('Model Residuals') +
ylab('Count')
norm_error2 <- ggplot(data = data, aes(sample = resid(lm3))) + stat_qq() + stat_qq_line()
ggsave(plot = norm_error1, filename = "../reports/figures/norm_error1.png")
ggsave(plot = norm_error2, filename = "../reports/figures/norm_error2.png")
lm1 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP, data = data)
lm2 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3d, filename = "../reports/figures/LCE_pred_resid.png")
lm3 <- lm(Case.Rate.per.100000.in.Last.7.Days ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3d, filename = "../reports/figures/LCE_pred_resid.png")
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
model_3_predictions <- predict(lm3)
model_3_residuals <- resid(lm3)
plot_model_3a <- data %>%
ggplot(aes(x = SIP, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3b <- data %>%
ggplot(aes(x = workplaces_2020.10.10, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Workplace Mobility') +
ylab("Model 3 Residuals")
plot_model_3c <- data %>%
ggplot(aes(x = NoFaceMask, y = model_3_residuals)) +
geom_point() + stat_smooth()
plot_model_3d <- data %>%
ggplot(aes(x = model_3_predictions, y = model_3_residuals)) +
geom_point() + stat_smooth() +
xlab('Model 3 Predictions') +
ylab('Model 3 Residuals')
#plot_model_3a
plot_model_3b
#plot_model_3c
plot_model_3d
ggsave(plot = plot_model_3b, filename = "../reports/figures/LCE_mob_resid.png")
ggsave(plot = plot_model_3d, filename = "../reports/figures/LCE_pred_resid.png")
# Breusch-Pagan test
lmtest::bptest(lm3)
lm1 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP, data = data)
lm2 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10, data = data)
lm3 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask, data = data)
lm4 <- lm(log(Case.Rate.per.100000.in.Last.7.Days) ~ SIP + workplaces_2020.10.10 + NoFaceMask + NoFaceMaskEmploy, data = data)
summary(lm1)
summary(lm2)
summary(lm3)
summary(lm4)
# Breusch-Pagan test
lmtest::bptest(lm4)
# Breusch-Pagan test
lmtest::bptest(lm3)
# Breusch-Pagan test
lmtest::bptest(lm2)
# Breusch-Pagan test
lmtest::bptest(lm1)
# Breusch-Pagan test
lmtest::bptest(lm3)
?lmtest::bptest()
data <- read_rds("../data/processed/main_state_data.RDS")
library(tidyverse)
library(stargazer)
library(sandwich)
data <- read_rds("../data/processed/main_state_data.RDS")
View(data)
View(data)
